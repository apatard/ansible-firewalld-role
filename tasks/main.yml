---
- name: ensure firewalld is installed
  package:
    name: firewalld
    state: present
  tags: firewalld

# Note: python3-firewall is available on bpo on buster.
- name: Install firewalld bindings
  package:
    name: python3-firewall
    state: present
  when:
    - ansible_distribution == 'Debian'
    - ansible_distribution_major_version is version_compare('9','>')

- name: ensure firewalld is enabled and started
  service: name=firewalld enabled=yes state=started
  tags: firewalld

- name: get actual firewalld default zone
  command: /usr/bin/firewall-cmd --get-default-zone
  register: defaultzone
  changed_when: false
  tags: firewalld

- name: set firewalld default zone
  command: "/usr/bin/firewall-cmd --set-default-zone={{ firewalld_default_zone }}"
  register: result
  when:
    - not ansible_check_mode
    - defaultzone.stdout != firewalld_default_zone
  changed_when: result.stdout == "success"
  tags: firewalld

- name: set firewalld zone interface
  shell: |
    if [[ "$(/usr/bin/firewall-cmd --get-zone-of-interface={{ item.value }})" != "{{ item.key }}" ]]
    then
      /usr/bin/firewall-cmd --zone={{ item.key }} --add-interface={{ item.value }} --permanent && echo "changed"
    fi
  args:
    executable: /bin/bash
  with_dict: "{{ firewalld_zone_interface|default({}) }}"
  register: shell_result
  changed_when: shell_result.stdout | join('') is search('changed')
  notify: restart firewalld
  tags: firewalld

- name: set firewalld zone source
  firewalld:
    zone: "{{ item.key }}"
    permanent: "{{ item.value.permanent|default('true') }}"
    immediate: "{{ item.value.immediate|default('true') }}"
    state: "{{ item.value.state|default('enabled') }}"
    source: "{{ item.value.source }}"
  with_dict: "{{ firewalld_zone_source|default({}) }}"
  tags: firewalld

- name: get active firewalld service rules
  shell: set -o pipefail; /usr/bin/firewall-cmd --list-services | sed -e 's/ /\n/g'
  args:
    executable: /bin/bash
  register: active_services
  changed_when: false
  tags: firewalld

- name: purge unconfigured firewalld service rules
  firewalld:
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: disabled
    zone: "{{ firewalld_default_zone }}"
  with_items: "{{ active_services.stdout_lines }}"
  when: firewalld_purge_services and item not in firewalld_service_rules
  tags: firewalld

- name: set firewalld service rules
  firewalld:
    service: "{{ item.key }}"
    permanent: "{{ item.value.permanent|default('true') }}"
    immediate: "{{ item.value.immediate|default('true') }}"
    state: "{{ item.value.state|default('enabled') }}"
    zone: "{{ item.value.zone|default('public') }}"
  with_dict: "{{ firewalld_service_rules|default({}) }}"
  tags: firewalld

- name: set firewalld port rules
  firewalld:
    port: "{{ item.value.port }}/{{ item.value.protocol|default('tcp') }}"
    permanent: "{{ item.value.permanent|default('true') }}"
    immediate: "{{ item.value.immediate|default('true') }}"
    state: "{{ item.value.state|default('enabled') }}"
    zone: "{{ item.value.zone|default('public') }}"
  with_dict: "{{ firewalld_port_rules|default({}) }}"
  tags: firewalld

- name: set firewalld rich rules
  firewalld:
    rich_rule: "{{ item.value.rule }}"
    permanent: "{{ item.value.permanent|default('true') }}"
    immediate: "{{ item.value.immediate|default('true') }}"
    state: "{{ item.value.state|default('enabled') }}"
    zone: "{{ item.value.zone|default('public') }}"
  with_dict: "{{ firewalld_rich_rules|default({}) }}"
  tags: firewalld
